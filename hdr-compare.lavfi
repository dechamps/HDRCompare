# This is a ffmpeg filtergraph: https://ffmpeg.org/ffmpeg-filters.html
#
# Note that the usual filtergraph "language" doesn't support comments. Lines
# beginning with "#", such as these, need to be filtered out before parsing.

[vid1] null@rename_hdr [hdr_original];
[vid2] null@rename_sdr [sdr_original];

[hdr_original]
# We assume the SDR source is 1080p (as they often are). The HDR source will
# likely be larger (typically UHD). We scale down the HDR source so that the
# comparison is fair and focuses on colour differences only.
#
# TODO: the downscaling might dim very small, sharp highlights (e.g. stars
# in a dark sky) due to local averaging, which is unfair to the HDR side.
# Investigate if this is a problem with the default downscaler and if so,
# use a sharper one.
    scale@scale_hdr = size=hd1080,

# Force `scale` to preserve 10-bit bit depth; it outputs 8-bit otherwise.
    format@scale_hdr_preserve_10bit = yuv420p10le
[hdr_scaled];

[hdr_scaled]
    drawtext@text_hdr_left = text=HDR : fontfile=c:/windows/fonts/arial.ttf : x=(1/4)*main_w-text_w/2 : y=main_h-text_h : fontcolor=#888888 : box=1 : boxcolor=black,
    drawtext@text_hdr_right = text=HDR : fontfile=c:/windows/fonts/arial.ttf : x=(3/4)*main_w-text_w/2 : y=main_h-text_h : fontcolor=#888888 : box=1 : boxcolor=black
[hdr_labelled];

[sdr_original]
    drawtext@text_sdr_left = text=SDR : fontfile=c:/windows/fonts/arial.ttf : x=(1/4)*main_w-text_w/2 : y=main_h-text_h : fontcolor=#888888 : box=1 : boxcolor=black,
    drawtext@text_sdr_right = text=SDR : fontfile=c:/windows/fonts/arial.ttf : x=(3/4)*main_w-text_w/2 : y=main_h-text_h : fontcolor=#888888 : box=1 : boxcolor=black
[sdr_labelled];

# On even seconds, keep the left side of SDR; on odd seconds, keep the right
# side.
[sdr_labelled] crop@crop_sdr = out_w=in_w/2 : x='mod(floor(t),2)*(in_w/2)' [sdr_cropped];

# Convert the SDR video to HDR10 (as is - no expansion).
#
# `npl` is the luminance that 100% SDR white will be mapped to and determines
# the overall brightness of the SDR side.
#
# TODO: zimg explicitly states that it is not a "color management system" and
# should not be used for "drastic" gamut changes, so the accuracy of this
# transform is unlikely to be good. Unfortunately it doesn't look like we have
# any other choice, aside from perhaps generating our own LUTs on the side.
[sdr_cropped] zscale@convert_sdr_to_hdr10 = npl=150 : primaries=2020 : transfer=smpte2084 : matrix=2020_ncl [sdr_cropped_hdr10];

# On even seconds, `sdr_cropped` is the left side so display it on the left; on
# off seconds, `sdr_cropped` is the right side so display it on the right.
[hdr_labelled] [sdr_cropped_hdr10] overlay@overlay = x='mod(floor(t),2)*overlay_w' [vo]
